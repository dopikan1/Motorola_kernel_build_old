name: Build Kernel (suki)

on:
  workflow_dispatch:

jobs:
  build-kernel:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - name: Setup environment
        run: |
          echo "ANYKERNEL_SOURCE=$(cat config.env | grep -w "ANYKERNEL_SOURCE" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
          echo "ANYKERNEL_SOURCE_BRANCH=$(cat config.env | grep -w "ANYKERNEL_SOURCE_BRANCH" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
          echo "KERNEL_SOURCE=$(cat config.env | grep -w "KERNEL_SOURCE" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
          echo "KERNEL_SOURCE_BRANCH=$(cat config.env | grep -w "KERNEL_SOURCE_BRANCH" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
          echo "KERNEL_CONFIG=$(cat config.env | grep -w "KERNEL_CONFIG" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
          echo "BUILD_ARGS=$(cat config.env | grep -w "BUILD_ARGS" | head -n 1 | cut -d ":" -f 2)" >> $GITHUB_ENV
          sudo apt-get update
          sudo apt install python2 libncurses5
          sudo apt-get install libselinux-dev
          sudo update-alternatives --install /usr/bin/python python /usr/bin/python2 1
          sudo update-alternatives --set python /usr/bin/python2
      - name: Pull toolchain
        run: |
          git clone --depth=1 https://github.com/LineageOS/android_prebuilts_gcc_linux-x86_aarch64_aarch64-linux-android-4.9 aarch64-linux-android-4.9
          git clone --depth=1 https://github.com/LineageOS/android_prebuilts_gcc_linux-x86_arm_arm-linux-androideabi-4.9 arm-linux-androideabi-4.9
          git clone https://github.com/xiangfeidexiaohuo/Snapdragon-LLVM.git clang
          
      - name: Pull kernel source
        run: |
          git clone --depth=1 ${{ env.KERNEL_SOURCE }} -b ${{ env.KERNEL_SOURCE_BRANCH }} kernel-source

      - name: Integrate SUSFS into kernel (non-GKI, 4.19)
        env:
          KERNEL_ROOT: kernel-source
          SUSFS_BRANCH: kernel-4.19
        run: |
          set -euo pipefail
          cd "$KERNEL_ROOT"

          # Detect KernelSU location after SukiSU has laid it out
          if [ -d KernelSU ]; then KSU_DIR="KernelSU";
          elif [ -d external/KernelSU ]; then KSU_DIR="external/KernelSU";
          else echo "KernelSU not found"; exit 1; fi

          rm -rf ../susfs4ksu
          git clone --depth=1 --branch "${SUSFS_BRANCH}" https://gitlab.com/simonpunk/susfs4ksu.git ../susfs4ksu

          cp ../susfs4ksu/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch "$KSU_DIR"/
          if [ -f ../susfs4ksu/kernel_patches/50_add_susfs_in_kernel-4.19.patch ]; then
            cp ../susfs4ksu/kernel_patches/50_add_susfs_in_kernel-4.19.patch ./50_add_susfs_in_kernel.patch
          else
            cp ../susfs4ksu/kernel_patches/50_add_susfs_in_kernel.patch ./50_add_susfs_in_kernel.patch
          fi
          cp -r ../susfs4ksu/kernel_patches/fs/* ./fs/ || true
          cp -r ../susfs4ksu/kernel_patches/include/linux/* ./include/linux/ || true

          ( cd "$KSU_DIR" && patch -p1 --forward < 10_enable_susfs_for_ksu.patch || true )
          patch -p1 --forward < ./50_add_susfs_in_kernel.patch

          # Required revert for SUSFS
          curl -sSL -o /tmp/ksu-revert-898e9d4.patch https://github.com/tiann/KernelSU/commit/898e9d4f8ca9b2f46b0c6b36b80a872b5b88d899.patch
          ( cd "$KSU_DIR" && patch -p1 --forward < /tmp/ksu-revert-898e9d4.patch || true )

          # Kill KSU kprobe hook in sources (non-GKI)
          grep -RIl "^#ifdef[[:space:]]\+CONFIG_KPROBES" "$KSU_DIR" | xargs -r sed -i \
            's/^#ifdef[[:space:]]\+CONFIG_KPROBES/#if defined(CONFIG_KPROBES) \&\& 0/'

          # Force SUSFS configs in the defconfig you build from
          DEFCONFIG="arch/arm64/configs/${KERNEL_CONFIG}"
          ./scripts/config --file "$DEFCONFIG" --enable CONFIG_KSU || true
          ./scripts/config --file "$DEFCONFIG" --enable CONFIG_KSU_SUSFS || true
          ./scripts/config --file "$DEFCONFIG" --enable CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT || true
          ./scripts/config --file "$DEFCONFIG" --disable CONFIG_KSU_KPROBES_HOOK || true


      - name: SukiSU Integration
        run: |
          cd kernel-source
          # Replace KernelSU-Next setup with SukiSU (susfs mode)
          curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/main/kernel/setup.sh" | bash -s susfs-main
          make mrproper
          cd ..

      - name: Build kernel
        run: |
          export KBUILD_BUILD_USER="hiahia"
          export PATH=$GITHUB_WORKSPACE/clang/bin:${PATH}
          args="                  ARCH=arm64 \
                                  O=../out \
                                  ${{ env.BUILD_ARGS }} \
                                  CLANG_TRIPLE=aarch64-linux-gnu- \
                                  CROSS_COMPILE=$GITHUB_WORKSPACE/aarch64-linux-android-4.9/bin/aarch64-linux-android- \
                                  CROSS_COMPILE_ARM32=$GITHUB_WORKSPACE/arm-linux-androideabi-4.9/bin/arm-linux-androideabi- "

          cd kernel-source

          # Generate base defconfig from source tree
          make ARCH=arm64 ${KERNEL_CONFIG}


          # Inject zstd-zram support
          ./scripts/config --file arch/arm64/configs/${KERNEL_CONFIG} \
            --enable CONFIG_ZRAM \
            --enable CONFIG_ZRAM_WRITEBACK \
            --enable CONFIG_CRYPTO_ZSTD \
            --enable CONFIG_ZSTD_COMPRESS \
            --enable CONFIG_ZSTD_DECOMPRESS
          ./scripts/config --file arch/arm64/configs/${KERNEL_CONFIG} \
            --set-str CONFIG_ZRAM_DEFAULT_COMP "zstd" || true
          ./scripts/config --file arch/arm64/configs/${KERNEL_CONFIG} \
            --enable CONFIG_ZRAM_DEF_COMP_ZSTD || true
          ./scripts/config --file arch/arm64/configs/${KERNEL_CONFIG} \
            --enable CONFIG_ZRAM_MEMORY_TRACKING

          # Inject KPM support
          ./scripts/config --file arch/arm64/configs/${KERNEL_CONFIG} \
            --enable CONFIG_KPM \
            --enable CONFIG_KALLSYMS \
            --enable CONFIG_KALLSYMS_ALL

          # Change default IO scheduler from CFQ to Kyber
          ./scripts/config --file arch/arm64/configs/${KERNEL_CONFIG} \
            --disable CONFIG_DEFAULT_CFQ \
            --set-str CONFIG_DEFAULT_IOSCHED "kyber" \
            --enable CONFIG_MQ_IOSCHED_KYBER

          # Keep CFQ built-in for fallback but not default
          ./scripts/config --file arch/arm64/configs/${KERNEL_CONFIG} \
            --enable CONFIG_IOSCHED_CFQ \
            --enable CONFIG_CFQ_GROUP_IOSCHED

          # Optional: confirm relevant settings
          grep -E 'CONFIG_KRETPROBES|CONFIG_ZRAM|ZSTD|CONFIG_KPM|CONFIG_KALLSYMS' arch/arm64/configs/${KERNEL_CONFIG} || true

          clang -v
          make ${args} ${{ env.KERNEL_CONFIG }}
          make -j$(nproc --all) ${args}

      - name: Package kernel
        run: |
          git clone --depth=1 ${{ env.ANYKERNEL_SOURCE }} -b ${{ env.ANYKERNEL_SOURCE_BRANCH }} AnyKernel3 && rm -rf AnyKernel3/.git AnyKernel3/.github AnyKernel3/LICENSE AnyKernel3/README.md
          if [[ -f out/arch/arm64/boot/Image.gz-dtb ]]; then
            cp out/arch/arm64/boot/Image.gz-dtb AnyKernel3/Image.gz-dtb
          elif [[ -f out/arch/arm64/boot/Image-dtb ]]; then
            cp out/arch/arm64/boot/Image-dtb AnyKernel3/Image-dtb
          elif [[ -f out/arch/arm64/boot/Image.gz ]]; then
            cp out/arch/arm64/boot/Image.gz AnyKernel3/Image.gz
          elif [[ -f out/arch/arm64/boot/Image ]]; then
            cp out/arch/arm64/boot/Image AnyKernel3/Image
          fi
          if [ -f out/arch/arm64/boot/dtbo.img ]; then
            cp out/arch/arm64/boot/dtbo.img AnyKernel3/dtbo.img
          fi

      - name: Upload kernel to artifact
        uses: actions/upload-artifact@v4
        with:
          name: AnyKernel3_kernel
          path: AnyKernel3/*
